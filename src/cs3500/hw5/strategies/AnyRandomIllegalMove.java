package cs3500.hw5.strategies;

import cs3500.hw5.model.Coord;
import cs3500.hw5.model.Player;
import cs3500.hw5.model.ReversiModel;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

/**
 * Reversi Strategy that returns a random illegal move, excluding moves on occupied tiles.
 */
public class AnyRandomIllegalMove extends BasicReversiStrategy {

  @Override
  public Optional<Coord> chooseMove(ReversiModel model, Player forWhom) {
    List<Coord> legalMoves = super.getAllPossibleMoves(model, forWhom);
    List<Coord> possibleMoves = new ArrayList<>();
    for (int row = 0; row < model.getBoard().size(); row++) {
      for (int col = 0; col < model.getBoard().get(row).size(); col++) {
        possibleMoves.add(new Coord(row, col));
        if (model.getBoard().get(row).get(col).toString().equals("X")
            || model.getBoard().get(row).get(col).toString().equals("O")) {
          legalMoves.add(new Coord(row, col));
        }
      }
    }
    // Remove all legal moves from the list of possible moves
    // Generated by chat gpt:
    List<Coord> illegalMoves = possibleMoves.stream()
        .filter(move -> !legalMoves.contains(move))
        .collect(Collectors.toList());

    if (illegalMoves.isEmpty()) {
      return Optional.empty();
    }

    for (Coord move : illegalMoves) {
      int weight = 1;
      super.weights.put(move, weight);
      this.updateHighestWeight(weight);
    }

    Random random = new Random();
    return Optional.of(illegalMoves.get(random.nextInt(illegalMoves.size())));
  }

  @Override
  public ReversiStrategy makeCopy() {
    return new AnyRandomLegalMove();
  }
}
